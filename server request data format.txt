This document describes the format of the data that the server expects to receive.
All requests to the server must start with a 5-byte header, followed by the request data.
Replies from the server will follow the same format, as described below:

Header (t, n):
t (1 byte) - request type
n (4 bytes, little-endian) - size in bytes of the following data

Request data:

Type 0 - Get server info
  data: none (ignored)
  server response: header (0, n) + n-byte JSON string describing the current game:
    {
    	"api_version": 0,
    	"platform": "freeware",
    	"uuid": "{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}",
    	"offsets": {
    		"flags": 4840864,
    		"map_flags": 4842936,
    		"arms_data": 4824008,
    		"current_hp": 4843212,
    		"max_hp": 4843216
    	}
    }

Type 1 - Execute a script
  data: n-byte script to be queued for execution in the parallel TSC processor
  server response:
    on success, header (1, 0) + no data. Note that a successful response does not mean
                that the script executed successfully, only that it has been queued.
    on failure, header (-1, m) + m byte string describing the error

Type 2 - Get flag state
  data: array of n/4 signed 4-byte flag numbers, little-endian
  server response:
    on success, header (2, n/4) + array of 1-byte 0/1 values corresponding to the
                state of the requested flags
    on failure, header (-1, m) + m byte string describing the error

Type 3 - Queue multiple event numbers
  data: array of n/4 signed 4-byte event numbers, little-endian
        (the events will be ran sequentially within the current map's script,
        so you'd best only specify events from Head.tsc!)
  server response:
    on success, header (3, 0) + no data
    on failure, header (-1, m) + m byte string describing the error

Type 4 - Read memory
  data: 4-byte starting address + unsigned 2-byte count (both little-endian)
  server response:
    on success, header (4, count) + array of count bytes which are the contents of
                the game process's memory starting at the requested address
    on failure, header (-1, m) + m byte string describing the error

Type 5 - Write memory
  data: 4-byte starting address, little endian + array of n-4 bytes to be written
        to the game process's memory starting at that address
  server response:
    on success, header (5, 0) + no data
    on failure, header (-1, m) + m byte string describing the error

Type 6 - Query game state
  data: none or 1 byte request type
  server response:
   if request type == 0 or blank:
     header (6, 1) + 1 byte denoting the current game execution state:
     0: intro cutscene (ModeOpening())
     1: title screen (ModeTitle())
     2: main game loop (ModeAction())
     3: inventory screen (CampLoop())
     4: teleporter menu (StageSelectLoop())
     5: minimap display (MiniMapLoop())
     6: island falling cutscene (Scene_DownIsland())
     7: Esc menu (Call_Escape())
    -1: none of the above (game initializing/de-initializing)
   if request type == 1:
     header (6, m) + m byte string containing the current (internal) map name
   on any error: header (-1, m) + m byte string describing the error

Type -1 (255) - Disconnect
 Closes the current connection. The server can detect if the client closed the connection
 from their end, so sending this before disconnecting is probably not necessary.
  data: none
  server response: none (connection will be closed)
